"""
Dust Sniffer ‚Äî –Ω–∞—Ö–æ–¥–∏—Ç –ø—ã–ª–µ–≤—ã–µ –≤—ã—Ö–æ–¥—ã (dust outputs) –≤ Bitcoin-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö.
"""

import requests
import sys

DUST_THRESHOLD_SATS = 546  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–∞ (–≤ —Å–∞—Ç–æ—à–∏), –ø—Ä–∏–Ω—è—Ç—ã–π –∑–∞ "dust"

def fetch_transaction(txid):
    url = f"https://blockstream.info/api/tx/{txid}"
    r = requests.get(url)
    r.raise_for_status()
    return r.json()

def analyze_tx(txid):
    print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é {txid} –Ω–∞ –Ω–∞–ª–∏—á–∏–µ dust-–≤—ã—Ö–æ–¥–æ–≤...")
    tx = fetch_transaction(txid)

    dust_outputs = []
    for vout in tx.get("vout", []):
        value = vout.get("value", 0)
        if value <= DUST_THRESHOLD_SATS:
            dust_outputs.append({
                "value": value,
                "address": vout.get("scriptpubkey_address", "unknown")
            })

    if dust_outputs:
        print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(dust_outputs)} –ø—ã–ª–µ–≤—ã—Ö –≤—ã—Ö–æ–¥–æ–≤:")
        for d in dust_outputs:
            print(f" - {d['value']} sats ‚Üí {d['address']}")
    else:
        print("‚úÖ –ü—ã–ª–µ–≤—ã—Ö –≤—ã—Ö–æ–¥–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python dust_sniffer.py <txid>")
        sys.exit(1)

    txid = sys.argv[1]
    try:
        analyze_tx(txid)
    except Exception as e:
        print("–û—à–∏–±–∫–∞:", e)
